 singel table or Master details


https://pastebin.com/raw/EA4a3Wzj


 -------------------Singel Table MVC---------------------------------

// dotnet add package Microsoft.EntityFrameworkCore
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
dotnet add package Microsoft.EntityFrameworkCore.Tools





public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    }




public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
        {
        }

        public DbSet<Product> Products { get; set; }
    }




"AllowedHosts": "*",
"ConnectionStrings": { "con": "Server=DESKTOP-ORLRIVP; Database=CrudExampleMVCDB; Trusted_Connection=True; TrustServerCertificate=true; MultipleActiveResultSets=true" }



builder.Services.AddDbContext<AppDbContext>(o => o.UseSqlServer(builder.Configuration.GetConnectionString("con")));






public class ProductsController : Controller
    {
        private readonly AppDbContext _context;

        public ProductsController(AppDbContext context)
        {
            _context = context;
        }

        // GET: Products
        public async Task<IActionResult> Index()
        {
            return View(await _context.Products.ToListAsync());
        }

        // GET: Products/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var product = await _context.Products
                .FirstOrDefaultAsync(m => m.Id == id);
            if (product == null)
            {
                return NotFound();
            }

            return View(product);
        }

        // GET: Products/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Products/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Id,Name,Price,Quantity")] Product product)
        {
            if (ModelState.IsValid)
            {
                _context.Add(product);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(product);
        }

        // GET: Products/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var product = await _context.Products.FindAsync(id);
            if (product == null)
            {
                return NotFound();
            }
            return View(product);
        }

        // POST: Products/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,Name,Price,Quantity")] Product product)
        {
            if (id != product.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(product);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ProductExists(product.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(product);
        }

        // GET: Products/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var product = await _context.Products
                .FirstOrDefaultAsync(m => m.Id == id);
            if (product == null)
            {
                return NotFound();
            }

            return View(product);
        }

        // POST: Products/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var product = await _context.Products.FindAsync(id);
            _context.Products.Remove(product);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool ProductExists(int id)
        {
            return _context.Products.Any(e => e.Id == id);
        }
    }
}





//Index.cshtml


@model IEnumerable<WebApplication1.Models.Product>

@{
    ViewData["Title"] = "Products";
}

<h1>Products</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Quantity)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Quantity)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>




//Create


@model WebApplication1.Models.Product

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Product</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Quantity" class="control-label"></label>
                <input asp-for="Quantity" class="form-control" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}


//Edit

@model WebApplication1.Models.Product

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Product</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Quantity" class="control-label"></label>
                <input asp-for="Quantity" class="form-control" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}



//Delete


@model WebApplication1.Models.Product

@{
    ViewData["Title"] = "Delete";
}

<h1>Delete</h1>

<h4>Product</h4>
<hr />
<div>
    <h4>Are you sure you want to delete this?</h4>
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Price)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Price)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Quantity)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Quantity)
        </dd>
    </dl>

    <form asp-action="DeleteConfirmed">
        <input type="hidden" asp-for="Id" />
        <div class="form-group">
            <input type="submit" value="Delete" class="btn btn-danger" /> |
            <a asp-action="Index">Back to List</a>
        </div>
    </form>
</div>



//Details


@model WebApplication1.Models.Product

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Product</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Price)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Price)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Quantity)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Quantity)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model.Id">
        Edit
    </a> |
    <a asp-action="Index">Back to List</a>
</div>




// Add-migration init
  update-database




<li class="nav-item">
    <a class="nav-link text-dark" asp-area="" asp-controller="Products" asp-action="Create">Add Sale</a>
</li>







---------------------Master_Details____________Two table CRUD
//Packegs

Microsoft.EntityFrameworkCore
Microsoft.EntityFrameworkCore.SqlServer
Microsoft.EntityFrameworkCore.Tools


// wwwroot

jquery
jquery-ajax-unobtrusive
jquery-validation-unobtrusive
js






  public class SalesMaster
    {
        public int SalesMasterId { get; set; }
        public string InvoiceNumber { get; set; }
        public string CustomerName { get; set; }
        public string MobileNo { get; set; }
        public string Address { get; set; }
        public virtual ICollection<SalesDetails> SalesDetails { get; set; } = new List<SalesDetails>();
    }




    public class SalesDetails
    {
        public int SalesDetailsId { get; set; }
        [Required, Display(Name = "Product Code")]
        public string ProductCode { get; set; }
        [Required, Display(Name = "Product Name")]
        public string ProductName { get; set; }
        [Required]
        public decimal Price { get; set; }
        [Required]
        public int Quantity { get; set; }
        [Required]
        public int SalesMasterId { get; set; }
        public virtual SalesMaster SalesMaster { get; set; }

    }



//  AppDbContext


    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions options) : base(options)
        {
        }
        public DbSet<SalesMaster> SalesMasters { get; set; }
        public DbSet<SalesDetails> SalesDetails { get; set; }
    }



// ViewModel - Folder

// SaleViewModel

        public class SaleViewModel
        {
            [Key]
            public int SalesMasterId { get; set; }
            [Required]
            [Display(Name = "Invoice Number")]
            public string InvoiceNumber { get; set; }
            [Required]
            [Display(Name = "Customer Name")]
            public string CustomerName { get; set; }
            [Required]
            [Display(Name = "Mobile No")]
            public string MobileNo { get; set; }
            [Required]
            [Display(Name = "Address")]
            public string Address { get; set; }
            public int SalesDetailsId { get; set; }
            public virtual IList<SalesDetails> SalesDetails { get; set; } = new List<SalesDetails>();     
        }



// appsettings

"AllowedHosts": "*",
"ConnectionStrings": { "abir": "Server=(localdb)\\MSSQLLocalDB; Database=HelloOpus1DB; Trusted_Connection=true; TrustServerCertificate=true" }


// Program

builder.Services.AddDbContext<AppDbContext>(o => o.UseSqlServer(builder.Configuration.GetConnectionString("abir")));

builder.Services.AddScoped<ISaleRepo, SaleRepo>();



// Repository - Folder


// Interface

// ISaleRepo

    public interface ISaleRepo
    {
        IEnumerable<SalesMaster> GetAll();
        IEnumerable<SalesMaster> Search(string searchTerm);
        public decimal CalculateTotalPrice(int saleId);
        SaleViewModel Add();
        void AddSale(SaleViewModel sale);
        SaleViewModel Update(int id);
        void UpdateSale(SaleViewModel cus);
        void Delete(int? id);

    }




// SaleRepo


    public class SaleRepo : ISaleRepo
    {
        private readonly AppDbContext _db;

        public SaleRepo(AppDbContext db)
        {
            _db = db;
        }

        public SaleViewModel Add()
        {
            SaleViewModel viewModel = new SaleViewModel();
            viewModel.SalesDetails.Add(new SalesDetails { SalesDetailsId = 1, });
            return viewModel;
        }

        public void AddSale(SaleViewModel sale)
        {
            SalesMaster c = new SalesMaster();
            c.InvoiceNumber = sale.InvoiceNumber;
            c.CustomerName = sale.CustomerName;
            c.MobileNo = sale.MobileNo;
            c.Address = sale.Address;
            _db.SalesMasters.Add(c);
            _db.SaveChanges();
            var user = _db.SalesMasters.FirstOrDefault(i => i.MobileNo == sale.MobileNo);
            if (user != null)
            {
                if (sale.SalesDetails.Count > 0)
                {
                    foreach (var item in sale.SalesDetails)
                    {
                        SalesDetails e = new SalesDetails();
                        e.SalesMasterId = user.SalesMasterId;
                        e.ProductName = item.ProductName;
                        e.ProductCode = item.ProductCode;
                        e.Price = item.Price;
                        e.Quantity = item.Quantity;
                        _db.Add(e);


                    }


                }
            }
            _db.SaveChanges();
        }

        public void Delete(int? id)
        {
            var sale = _db.SalesMasters.Find(id);
            var pod = _db.SalesDetails.Where(e => e.SalesMasterId == id);
            foreach (var item in pod)
            {
                _db.SalesDetails.Remove(item);
            }

            _db.Entry(sale).State = EntityState.Deleted;
            _db.SaveChanges();
        }

        public IEnumerable<SalesMaster> GetAll()
        {
            var sale = _db.SalesMasters.Include(i => i.SalesDetails).ToList();
            return sale;
        }

        public IEnumerable<SalesMaster> Search(string searchTerm)
        {
            searchTerm = searchTerm.ToLower();


            var sale = _db.SalesMasters
                .Where(c => c.SalesMasterId.ToString().Contains(searchTerm)
                    || c.InvoiceNumber.ToLower().Contains(searchTerm)
                    || c.CustomerName.Contains(searchTerm) || c.MobileNo.Contains(searchTerm))
                .Include(c => c.SalesDetails)
                .ToList();

            return sale;
        }

        public decimal CalculateTotalPrice(int saleId)
        {

            decimal totalPrice = _db.SalesDetails
            .Where(p => p.SalesMasterId == saleId)
            .Sum(p => p.Price);

            return totalPrice;
        }


        public SaleViewModel Update(int id)
        {
            SalesMaster cus = _db.SalesMasters.First(x => x.SalesMasterId == id);
            var pod = _db.SalesDetails.Where(x => x.SalesMasterId == id).ToList();


            if (cus != null)
            {
                SaleViewModel cusVM = new SaleViewModel()
                {
                    SalesMasterId = cus.SalesMasterId,
                    InvoiceNumber = cus.InvoiceNumber,
                    CustomerName = cus.CustomerName,
                    MobileNo = cus.MobileNo,
                    Address = cus.Address,

                };
                if (pod.Count() > 0)
                {
                    foreach (var item in pod)
                    {
                        SalesDetails obj = new SalesDetails();
                        obj.SalesMasterId = cus.SalesMasterId;
                        obj.ProductName = item.ProductName;
                        obj.ProductCode = item.ProductCode;
                        obj.Price = item.Price;
                        obj.Quantity = item.Quantity;
                        cusVM.SalesDetails.Add(obj);
                    }
                }
                return cusVM;
            }
            return null;
        }

        public void UpdateSale(SaleViewModel cus)
        {
            var existingCustomer = _db.SalesMasters.FirstOrDefault(a => a.SalesMasterId == cus.SalesMasterId);
            if (existingCustomer != null)
            {
                existingCustomer.InvoiceNumber = cus.InvoiceNumber;
                existingCustomer.CustomerName = cus.CustomerName;
                existingCustomer.MobileNo = cus.MobileNo;
                existingCustomer.Address = cus.Address;

                var existingProduct = _db.SalesDetails.Where(e => e.SalesMasterId == cus.SalesMasterId);
                _db.SalesDetails.RemoveRange(existingProduct);

                if (cus.SalesDetails != null && cus.SalesDetails.Count > 0)
                {
                    foreach (var result in cus.SalesDetails)
                    {
                        existingCustomer.SalesDetails.Add(new SalesDetails
                        {
                            ProductName = result.ProductName,
                            ProductCode = result.ProductCode,
                            Price = result.Price,
                            Quantity = result.Quantity,
                        });
                    }
                }

                _db.SaveChanges();
            }
        }
    }



//  add-migration init
// update-database



// SaleController


    public class SaleController : Controller
    {
        private readonly ISaleRepo _saleRepo;

        public SaleController(ISaleRepo saleRepo)
        {
            _saleRepo = saleRepo;
        }

        public IActionResult Index()
        {
            var s = _saleRepo.GetAll();
            return View(s);
        }

        public IActionResult Search(string searchTerm)
        {
            if (string.IsNullOrWhiteSpace(searchTerm))
            {

                return RedirectToAction("Index");
            }

            var searchResults = _saleRepo.Search(searchTerm);

            return View("Index", searchResults);
        }

        public IActionResult Create()
        {
            SaleViewModel d = _saleRepo.Add();
            return View(d);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(SaleViewModel cus)
        {

            _saleRepo.AddSale(cus);
            return RedirectToAction("Index");

        }

        [HttpGet]
        public IActionResult Edit(int id)
        {
            SaleViewModel d = _saleRepo.Update(id);
            return View("Edit", d);
        }
        [HttpPost]
        public IActionResult Edit(SaleViewModel cus)
        {
            _saleRepo.UpdateSale(cus);
            return RedirectToAction("Index");
        }

        [HttpPost]
        public IActionResult Delete(int id)
        {
            _saleRepo.Delete(id);
            return RedirectToAction("Index");
        }

        public IActionResult Details(int id)
        {
            SaleViewModel customer = _saleRepo.Update(id);

            if (customer != null)
            {
                return View(customer);
            }

            return NotFound();
        }

        public IActionResult TotalPrice(int saleId)
        {
            decimal totalPrice = _saleRepo.CalculateTotalPrice(saleId);
            return View(totalPrice);
        }
    }




// View


// Index

@model IEnumerable<SalesMaster>
@{
    Layout = "/Views/Shared/_Layout.cshtml";
}
<br />
<br />
<p>
    <a href="@Url.Action("Create","Sale")" class="btn btn-outline-success">Add Sale</a>
</p>
@using (Html.BeginForm("Search", "Sale", FormMethod.Get))
{
    <div class="row">
        <div class="col-6">
            <div class="form-group">
                @Html.TextBox("searchTerm", null, new { @class = "form-control", placeholder = "Search by ID, InvoiceNumber, CustomerName or MobileNo" })
            </div>
        </div>
        <div class="col-6">
            <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </div>
}
<br />
<br />
<h3 class="text-center">Sale Information List</h3>
<div class="row">
    @foreach (var item in Model)
    {
        <div class="card mb-2">
            <div class="card-header d-flex justify-content-between">
                <div>

                    <label class="mr-2"><b>Invoice:</b> @Html.DisplayFor(i => item.InvoiceNumber)</label><br />
                    <label class="mr-2"><b>Name:</b> @Html.DisplayFor(i => item.CustomerName)</label><br />
                    <label class="mr-2"><b>Mobile No:</b> @Html.DisplayFor(i => item.MobileNo)</label><br />
                    <label class="mr-2"><b>Address:</b> @Html.DisplayFor(i => item.Address)</label><br />
                </div>
                <div class="card-body">
                    <table class="table table-striped">
                        <thead class="accordion-collapse">
                            <tr>
                                <th>Product Code</th>
                                <th>ProductName</th>
                                <th>Price</th>
                                <th>Quantity</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var info in item.SalesDetails)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(e => info.ProductCode)</td>
                                    <td>@Html.DisplayFor(e => info.ProductName)</td>
                                    <td>@Html.DisplayFor(e => info.Price)</td>
                                    <td>@Html.DisplayFor(e => info.Quantity)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div>
                    <a href="@Url.Action("Edit", "Sale", new {id=item.SalesMasterId})" class="btn btn-outline-primary">Edit</a>
                    <input id="btnEntryDelete" onclick="Delete(@item.SalesMasterId)" class="btn btn-outline-danger" type="button" value="Delete" />
                    <a href="@Url.Action("Details", "Sale", new {id=item.SalesMasterId})" class="btn btn-outline-secondary">Details</a>
                    <a href="@Url.Action("TotalPrice", new { saleId = item.SalesMasterId })" class="btn btn-info">Total Price</a>
                </div>
            </div>
        </div>
    }
</div>
<script src="~/jquery/jquery.min.js"></script>
<script>
    function Delete(id) {
        $.ajax({
            type: "POST",
            data: JSON.stringify({ id: id }),
            url: "/Sale/Delete?id=" + id,
            datatype: "Json",
            ContentType: "application/Json; charset=utf-8",
            success: function (data) {
                window.location.href = "/Sale/Index"
            },
            error: function (err) {
                window.location.href = "/Sale/Index"
            }
        })
    }
</script>


// Create

@model SaleViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<hr />
<div class="card">
    <div class="card-header">
        <h4>Create Sale</h4>
    </div>
    <form asp-action="Create" enctype="multipart/form-data">
        @Html.AntiForgeryToken()
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label asp-for="InvoiceNumber" class="control-label"></label>
                    <input asp-for="InvoiceNumber" class="form-control" />
                    <span asp-validation-for="InvoiceNumber" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="CustomerName" class="control-label"></label>
                    <input asp-for="CustomerName" class="form-control" />
                    <span asp-validation-for="CustomerName" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="MobileNo" class="control-label"></label>
                    <input asp-for="MobileNo" class="form-control" />
                    <span asp-validation-for="MobileNo" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Address" class="control-label"></label>
                    <input asp-for="Address" class="form-control" />
                    <span asp-validation-for="Address" class="text-danger"></span>
                </div>
            </div>
            <div class="col-6">
                <div class="col-md-12">
                    <table id="ExpTable" class="table table-striped table-sm">
                        <thead>
                            <tr>
                                <th>Product Code</th>
                                <th>Product Name</th>
                                <th>Price</th>
                                <th>Quantity</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Model.SalesDetails.Count; i++)
                            {
                                <tr>
                                    <td>
                                        <input asp-for="SalesDetails[i].ProductCode" class="form-control" />
                                    </td>
                                    <td>
                                        <input asp-for="SalesDetails[i].ProductName" class="form-control" />
                                    </td>
                                    <td>
                                        <input asp-for="SalesDetails[i].Price" class="form-control" />
                                    </td>
                                    <td>
                                        <input asp-for="SalesDetails[i].Quantity" class="form-control" />
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-danger" onclick="DeleteItem(this)">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <button id="btnAddResult" type="button" class="btn btn-secondary">Add Product</button>
                </div>
                <input type="hidden" id="hdnLastIndex" value="0" />
            </div>
            <div class="col-6-group text-right p-2">
                <a asp-action="Index" class="btn btn-secondary">&nbsp;Back to List&nbsp;</a>
                <input id="submitForm" type="submit" value="Create" class="btn btn-primary" />
            </div>
        </div>
    </form>
</div>
<script src="~/jquery/jquery.min.js"></script>
<script>
    function DeleteItem(btn) {
        $(btn).closest('tr').remove();
        updateResultRowIndexes();
        console.log("deleted");
    }
    function updateResultRowIndexes() {
        $("#ExpTable tbody tr").each(function (index) {
            $(this).find("input").each(function () {
                var currentName = $(this).attr("name");
                var newName = currentName.replace(/SalesDetails\[\d+\]/g, `SalesDetails[${index}]`);
                $(this).attr("name", newName);
            });
        });
    }
    $("#btnAddResult").click(function () {
        var lastRowIndex = $("#ExpTable tbody tr").length;
        var newRowHtml = `<tr>
            <td>
                <input name="SalesDetails[${lastRowIndex}].ProductCode" class="form-control" />
            </td>
            <td>
                <input name="SalesDetails[${lastRowIndex}].ProductName" class="form-control" />
            </td>
            <td>
                <input name="SalesDetails[${lastRowIndex}].Price" class="form-control" />
            </td>
            <td>
                <input name="SalesDetails[${lastRowIndex}].Quantity" class="form-control" />
            </td>
            <td>
                <button type="button" class="btn btn-danger" onclick="DeleteItem(this)">Delete</button>
            </td>
        </tr>`;
        $("#ExpTable tbody").append(newRowHtml);
        updateResultRowIndexes();
    });
    $("#submitForm").click(function (event) {
        event.preventDefault();
        var formData = new FormData($('form')[0]);
        $.ajax({
            type: "post",
            url: "/Sale/Create",
            contentType: false,
            processData: false,
            data: formData,
            success: function (data) {
                alert("Created.Go Back To List!!!");
                $('form')[0].reset();
                $("#ExpTable tbody").empty();
                updateResultRowIndexes();
            },
            error: function (err) {
                alert("Error Occurred");
            }
        });
    });
</script>



//Edit

@model SaleViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<hr />
<div class="card">
    <div class="card-header">
        <h4>Edit Sale</h4>
    </div>
    <form asp-action="Edit" enctype="multipart/form-data">
        <input type="hidden" asp-for="SalesMasterId" />
        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label asp-for="InvoiceNumber" class="control-label"></label>
                    <input asp-for="InvoiceNumber" class="form-control" />
                    <span asp-validation-for="InvoiceNumber" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="CustomerName" class="control-label"></label>
                    <input asp-for="CustomerName" class="form-control" />
                    <span asp-validation-for="CustomerName" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="MobileNo" class="control-label"></label>
                    <input asp-for="MobileNo" class="form-control" />
                    <span asp-validation-for="MobileNo" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Address" class="control-label"></label>
                    <input asp-for="Address" class="form-control" />
                    <span asp-validation-for="Address" class="text-danger"></span>
                </div>


            </div>
            <div class="col-6">
                <div class="col-md-12">
                    <table id="ExpTable" class="table table-striped table-sm">
                        <thead>
                            <tr>
                                <th>Product Code</th>
                                <th>Product Name</th>
                                <th>Price</th>
                                <th>Quantity</th>

                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Model.SalesDetails.Count; i++)
                            {
                                <tr>
                                    <td>
                                        <input asp-for="SalesDetails[i].ProductCode" class="form-control" />
                                    </td>
                                    <td>
                                        <input asp-for="SalesDetails[i].ProductName" class="form-control" />
                                    </td>
                                    <td>
                                        <input asp-for="SalesDetails[i].Price" class="form-control" />
                                    </td>
                                    <td>
                                        <input asp-for="SalesDetails[i].Quantity" class="form-control" />
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-danger" onclick="DeleteItem(this)">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    
                    <button id="btnAddResult" type="button" class="btn btn-secondary">Add Product</button>


                </div>
                <input type="hidden" id="hdnLastIndex" value="0" />
            </div>
            <div class="col-6-group text-right p-2">
                <a asp-action="Index" class="btn btn-secondary">&nbsp;Back to List&nbsp;</a>
                <input id="submitForm" type="submit" value="Edit" class="btn btn-primary" />
            </div>
        </div>
    </form>
</div>
<script src="~/jquery/jquery.min.js"></script>
<script>


    function DeleteItem(btn) {
        $(btn).closest('tr').remove();
        updateResultRowIndexes();
    }

    function updateResultRowIndexes() {
        $("#ExpTable tbody tr").each(function (index) {
            $(this).find("input").each(function () {
                var currentName = $(this).attr("name");
                var newName = currentName.replace(/SalesDetails\[\d+\]/g, `SalesDetails[${index}]`);
                $(this).attr("name", newName);
            });
        });
    }

    $("#btnAddResult").click(function () {
        var lastRowIndex = $("#ExpTable tbody tr").length;
        var newRowHtml = `<tr>
            <td>
                <input name="SalesDetails[${lastRowIndex}].ProductCode" class="form-control" />
            </td>
            <td>
                <input name="SalesDetails[${lastRowIndex}].ProductName" class="form-control" />
            </td>
            <td>
                <input name="SalesDetails[${lastRowIndex}].Price" class="form-control" />
            </td>
            <td>
                <input name="SalesDetails[${lastRowIndex}].Quantity" class="form-control" />
            </td>
            <td>
                <button type="button" class="btn btn-danger" onclick="DeleteItem(this)">Delete</button>
            </td>
        </tr>`;

        $("#ExpTable tbody").append(newRowHtml);
        updateResultRowIndexes();
    });

    $("#submitForm").click(function (event) {
        event.preventDefault();

        var formData = new FormData($('form')[0]);

        $.ajax({
            type: "post",
            url: "/Sale/Edit",
            contentType: false,
            processData: false,
            data: formData,
            success: function (data) {
                alert("Updated.Go Back To List!!!");
            },
            error: function (err) {
                alert("Error Occurred");
            }
        });
    });
</script>



//Details


@model SaleViewModel

@{
    Layout = "/Views/Shared/_Layout.cshtml";
}

<h1>Sale Details</h1>

<div>
    <h4>Name: @Model.InvoiceNumber</h4>
    <p>Phone: @Model.CustomerName</p>
    <p>Order Date: @Model.MobileNo</p>
    <p>Active: @Model.Address </p>
</div>

<h2>Products</h2>
<table class="table">
    <thead>
        <tr>
            <th>Product Code</th>
            <th>Product Name</th>
            <th>Price</th>
            <th>Quantity</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in Model.SalesDetails)
        {
            <tr>
                <td>@product.ProductCode</td>
                <td>@product.ProductName</td>
                <td>@product.Price.ToString("C")</td>
                <td>@product.Quantity</td>
            </tr>

        }
    </tbody>

</table>
<a asp-action="Index" class="btn btn-secondary">&nbsp;Back to List&nbsp;</a>



// TotalPrice

@model decimal

@{
    Layout = "/Views/Shared/_Layout.cshtml";
}

<h1>Total Price for Customer</h1>

<p>Total Price: @Model.ToString("C")</p>
<a asp-action="Index" class="btn btn-secondary">&nbsp;Back to List&nbsp;</a>


// Shared

<li class="nav-item">
    <a class="nav-link text-dark" asp-area="" asp-controller="Sale" asp-action="Create">Add Sale</a>
</li>





// @using OnoreCRUD.ViewModel